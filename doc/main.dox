/// @mainpage UBlox Binary Protocol Implementation
/// @tableofcontents
/// @section ublox_overview Overview
/// <a href="https://www.u-blox.com/en/position-time">u-blox GPS receivers</a> 
/// use a UBX binary protocol to transmit GPS data to a host computer using
/// asynchronous serial ports. This library provides implementation of all 
/// the messages as well as wrapping transport protocol used in u-blox 4/5/6/7 
/// devices. 
///
/// This library is implemented using C++(11) programming language and 
/// uses <a href="https://github.com/arobenko/comms_champion#comms-library">COMMS library</a> from 
/// <a href="https://github.com/arobenko/comms_champion">comms_champion</a>
/// project to specify all the messages. Just like the @b COMMS, this library
/// is a <b>headers only</b> one and doesn't require preliminary compilation. It
/// allows the C++ compiler to generate best code possible required for the product
/// being developed.
///
/// It is recommended to get to know the @b COMMS library and its features first,
/// in order to understand how to use this one. The documentation of the
/// @b COMMS library can be downloaded from
/// <a href="https://dl.dropboxusercontent.com/u/46999418/comms_champion/comms/doc_comms.zip">here</a>. 
///
/// @section ublox_headers Headers
/// The @b UBLOX library uses classes and functions from the 
/// <a href="https://github.com/arobenko/comms_champion#comms-library">COMMS library</a>.
/// Hence, please make sure that the headers of @b COMMS library as well
/// as this one are reachable through the include search paths used by the
/// compiler.
/// 
/// To include definitions of all the main classes from @b UBLOX library use
/// the following include statment:
/// @code
/// #include "ublox/ublox.h"
/// @endcode
/// 
/// The @b UBX protocol is huge, it contains hundreds of messages, and most likely
/// custom client implementations will use only limited number of the defined
/// messages. Therefore, in order to use the selected messages, use separate
/// message specific include statements:
/// @code
/// #include "ublox/message/NavPosecef.h"
/// #include "ublox/message/NavSol.h"
/// #include "ublox/message/NavTimegps.h"
/// ...
/// @endcode
///
/// @section ublox_ubx_messages UBX Messages
/// The ublox binary protocol (UBX) specification names all the messages in
/// the @b CLASS-MESSAGE format (@b NAV-POSECEF, @b AID-ALM, @b CFG-MSG, etc...). This
/// library names message classes in the similar fashion, but using
/// <a href="https://en.wikipedia.org/wiki/CamelCase">CamelCase</a> naming
/// convention (@b NavPosecef, @b AidAlm, @b CfgMsg, etc...). Every message class is defined
/// in a separate file (in ublox/message folder) and resides in ublox::message 
/// namespace. 
///
/// Most of the messages have two forms: receiver output and poll request. 
/// The poll request usually has empty body but uses the same message ID as
/// the receiver output form of the message. This library implements these
/// two forms of the same message as two separate classes. The class name
/// of the @b poll message will have @b Poll suffix in its name. For example
/// the @b NAV-POSECEF output message is implemented in ublox::message::NavPosecef class,
/// while @b NAV-POSECEF poll request is implemented in ublox::message::NavPosecefPoll one.
///
/// There may also be multiple formats of the same output message. The good
/// example would be CFG-PRT messages. The first field in such message identifies
/// the type of the port (@b DDC, @b UART, @b SPI, @b USB) which defines the
/// contents of the following fields. It was much simpler and more convenient
/// to implement them as separate message classes: 
/// @li ublox::message::CfgPrtDdc
/// @li ublox::message::CfgPrtUart
/// @li ublox::message::CfgPrtSpi,
/// @li ublox::message::CfgPrtUsb
///
/// The @b poll form of the message may also have multiple forms. For example
/// poll request for RXM-ALM message may have either empty body or provide
/// SVID of the satellite as its only field. This library implements these 
/// forms as two separate messages: ublox::message::RxmAlmPoll and 
/// ublox::message::RxmAlmPollSv.
///
/// The bottom line, in order to find a class for a suitable form of the message
/// open ublox::message namespace page and search for all the
/// encounters of the message name used in the specification (@b NAV-POSECEF, 
/// @b AID-ALM, @b CFG-MSG, etc...), analyse the message class name and/or 
/// read the documentation of the latter and pick the one you require.
///
/// @section ublox_interface_classes Interface Classes
/// As a result of having separate classes to different modes of the same message
/// (data and poll request), every such message object can be sent
/// either @b from the ublox device or @b to it, and usually does @b NOT go both ways. 
/// Therefore, to avoid unnecessary code generation of read or write functionality 
/// when it is not needed, it is recommended
/// to define two polymorphic interface classes for ublox messages. One is for input
/// messages and another for output ones. To define the polymorphic interface
/// for the messages, use ublox::MessageT class and providing relevant options
/// from the @b comms::option namespace defined in the @b COMMS library.
/// @code
/// #include "ublox/ublox.h"
///
/// // Forward declare the message handling class
/// class MyHandler;
/// 
/// // Define polymorphic interface for input messages
/// using MyInputMessage = 
///     ublox::MessageT<
///         comms::option::ReadIterator<const std::uint8_t*>, // use const std::uint8_t* as iterator used for reading
///         comms::option::Handler<MyHandler> // Support polymorphic dispatch to MyHandler object
///     >;
///
/// // Define polymorphic interface for output messages
/// using MyOutputMessage = 
///     ublox::MessageT<
///         comms::option::IdInfoInterface, // allow polymorphic ID retrieval
///         comms::option::WriteIterator<std::uint8_t*>, // use std::uint8_t* as iterator used for writing
///         comms::option::LengthInfoInterface // allow polymophic retrieval of serialisation length
///     >;
/// @endcode
/// If the application being developed requre every single message object to
/// expose both @b read and @b write functionalities, these two classes may be
/// unified into one:
/// @code
/// using MyCommonMessage = 
///     ublox::MessageT<
///         comms::option::IdInfoInterface, // allow polymorphic ID retrieval
///         comms::option::ReadIterator<const std::uint8_t*>, // use const std::uint8_t* as iterator used for reading
///         comms::option::WriteIterator<std::uint8_t*>, // use std::uint8_t* as iterator used for writing
///         comms::option::LengthInfoInterface, // allow polymophic retrieval of serialisation length
///         comms::option::Handler<MyHandler> // Support polymorphic dispatch to MyHandler object
///     >;
/// @endcode
///
/// @section ublox_input_messages Input Messages
/// The next step is to decide what input messages need to be recognised and
/// properly handled. For convenience, it is recommended to typedef them:
/// @code
/// #include "ublox/message/NavPosecef.h"
/// #include "ublox/message/NavSol.h"
/// #include "ublox/message/NavTimegps.h"
/// ...
///
/// // Input messages
/// using InNavPosecef = ublox::message::NavPosecef<MyInputMessage>;
/// using InNavSol = ublox::message::NavSol<MyInputMessage>;
/// using InNavTimegps = ublox::message::NavTimegps<MyInputMessage>;
/// ...
/// @endcode
/// These messages need to be bundles into @b std::tuple.
/// @code
/// using AllInputMessages = 
///     std::tuple<
///         InNavPosecef, // ID=0x0101
///         InNavSol, // ID=0x0106
///         InNavTimegps, // ID=0x0120
///         ...
///     >;
/// @endcode
/// @b IMPORTANT: The messages in the tuple above @b MUST appear in order of
/// their numeric IDs. The numeric ID is combined of CLASS ID as most significant
/// byte and the message ID within the class in the least significant byte.
/// It is recommended to take ublox::InputMessages definition as the basis and
/// remove all unnecessary messages from there.
/// 
/// @section ublox_protocol_stack Transport Protocol
/// In addition to defining the polymorphic interfaces and input messages there is a need to 
/// define protocol stack that will handle all the transport information:
/// @code
/// using ProtStack = ublox::Stack<MyInputMessage, AllInputMessages>;
/// @endcode
/// The first template parameter is the common polymorphic interface for all
/// input messages. The second template parameter is @b std::tuple of all
/// input message types the protocol stack needs to recognise in order to be
/// able to create proper message objects. When new incoming message is recognised
/// and created, it will be returned from the @b read operation wrapped in
/// the smart pointer (@b ProtStack::MsgPtr type). By default the message object
/// will by dynamically allocated and the mentioned smart pointer is @b std::unique_ptr.
///
/// If the application being developed is for bare-metal platform which doesn't
/// have any heap and messages need to be allocated "in-place" in some common 
/// memory area, the @b comms::option::InPlaceAllocation option may be passed
/// as the third template parameter.
/// @code
/// using ProtStack = ublox::Stack<MyInputMessage, AllInputMessages, comms::option::InPlaceAllocation>;
/// @endcode
/// In this case, the smart pointer holding the allocated message is still 
/// going to be @b std::unique_ptr, but with custom deleter, which will explicitly
/// call the message object destructor, when the @b std::unique_ptr is destructed.
/// Having such "in-place" allocation doesn't allow having multiple message
/// objects allocated at the same time. It means: after message has been created
/// and handled, it needs to be destructed prior to being able to allocate and
/// handle next message.
///
/// @section ublox_read_and_handle Reading Input Messages
/// Below is an example of how the input messages can be read and dispatched
/// to their appropriate handling function.
/// @code
/// ProtStack protStack; // Protocol stack defined in previous section
/// MyHandler handler; // Handler object (will be desribed later)
///
/// // Receives input buffer and its size and returns number of consumed bytes
/// std::size_t processInput(const std::uint8_t* buf, std::size_t len)
/// {
///     std::size_t consumed = 0U;
///     // Processing loop
///     while (consumed < len) {
///         // Smart pointer to the message object.
///         ProtStack::MsgPtr msgPtr; 
///
///         // Type of the message interface class
///         typedef ProtStack::MsgPtr::element_type MsgType; 
///     
///         // Get the iterator for reading
///         auto begIter = comms::readIteratorFor<MsgType>(buf + consumed);
///         auto iter = begIter;
///
///         // Do the read
///         auto es = protStack.read(msgPtr, iter, len - consumed);
///         if (es == comms::ErrorStatus::NotEnoughData) {
///             break; // Not enough data in the buffer, stop processing
///         } 
///     
///         if (es == comms::ErrorStatus::ProtocolError) {
///             // Something is not right with the data, remove one character and try again
///            ++consumed;
///             continue;
///         }
///
///         if (es == comms::ErrorStatus::Success) {
///             assert(msgPtr); // If read is successful, msgPtr is expected to hold a valid pointer
///             msgPtr->dispatch(handler); // Dispatch message for handling
///         }
///
///         // The iterator for reading has been advanced, update the difference
///         consumed += std::distance(begIter, iter);
///     }
///
///     // Report how many bytes have been consumed from the buffer
///     report consumed;
/// }
/// @endcode
/// @b NOTE, that after the @b read operation is determined to be successful,
/// the allocated message object is dispatched to the handler using 
/// polymprhic @b dispatch() call. The next section describes the functions
/// the message handling object needs to define.
///
/// @section ublox_message_handler Message Handler
/// The message handler used to handle input messages is expected to define
/// @b handle() member function for every input message it is expected to handle
/// as well as common one for all the "don't care" messages:
/// @code
/// class MyHandler
/// {
/// public:
///     void handle(InNavPosecef& msg) {
///        ... // handle received NAV-POSECEF message
///     }
///
///     void handle(InNavSol& msg) {
///         ... // handle received NAV-SOL message
///     }
///
///     void handle(InNavTimegps& msg) {
///         ... // handle received NAV-TIMEGPS message
///     }
///
///     // common handling function for all other "don't care" messages
///     void handle(MyInputMessage& msg) {
///         ... // handle or ignore all other messages
///     }
/// };
/// @endcode
/// If the code being developed requires having multiple handlers for the same
/// messagesm it is possible to define the @b handle() functions mentioned above
/// as (pure) @b virtual and have other handling classes derive from it while
/// implementing the required functionality. However, it is recommended to 
/// use the infrastructure already provided by the @b COMMS library. Just 
/// define your handling interface class inheriting from @b comms::GenericHandler
/// @code
/// class MyHandler : public comms::GenericHandler<MyInputMessage, AllInputMessages>
/// {
/// };
/// @endcode
/// The @b comms::GenericHandler defines virtual @b handle() function for every
/// message type in the second (@b AllInputMessages) template parameter as well
/// as the common handling function for the interface type passed as
/// the first template parameter (@b MyInputMessage). The default implementation
/// provided by the comms::GenericHandler is that every @b handle() member function
/// upcasts the handled input message type to the common interface one and
/// calls the common handling function, which by default does nothing. Now
/// derive your custom handling classes from @b MyHandler and override only the
/// necessary functions:
/// @code 
/// class MyHandler1 : public MyHandler
/// {
/// public:
///     virtual void handle(InNavPosecef& msg) override {...}
///     virtual void handle(InNavTimegps& msg) override {...}
///     virtual void handle(MyInputMessage& msg) override {...}
/// };
///
/// class MyHandler2 : public MyHandler
/// {
/// public:
///     virtual void handle(InNavSol& msg) override {...}
///     virtual void handle(MyInputMessage& msg) override {...}
/// };
/// @endcode
///
/// Every message class in ublox::message namespace uses 
/// @b COMMS_MSG_FIELDS_ACCESS() macro to provide names to its fields. It 
/// makes the access to the fields of the message easier. The fields can be
/// accessed via defined accessor functions:
/// @code
/// class MyHandler
/// {
/// public:
///     void handle(InNavPosecef& msg) {
///         auto& iTOW = msg.field_iTOW(); // iTOW field
///         auto& ecefX = msg.field_ecefX(); // ecefX field
///         auto& ecefY = msg.field_ecefY(); // ecefY field
///         auto& ecefZ = msg.field_ecefZ(); // ecefZ field
///
///         auto iTowVal = iTOW.value(); // Get iTOW value
///         auto ecefXVal = ecefX.value(); // Get ecefX value
///         auto ecefYVal = ecefY.value(); // Get ecefY value
///         auto ecefZVal = ecefZ.value(); // Get ecefZ value
///
///             ... // Do something with the values
///     }
/// };
/// @endcode
/// or via @b FieldIdx enum.
/// @code
/// class MyHandler
/// {
/// public:
///     void handle(InNavPosecef& msg) {
///         auto& allFields = msg.fields(); // access to std::tuple of fields
///         auto& iTOW = std::get<InNavPosecef::FieldIdx_iTOW>(allFields); // iTOW field
///         auto& ecefX = std::get<InNavPosecef::FieldIdx_ecefX>(allFields); // ecefX field
///         auto& ecefY = std::get<InNavPosecef::FieldIdx_ecefX>(allFields); // ecefY field
///         auto& ecefZ = std::get<InNavPosecef::FieldIdx_ecefZ>(allFields); // ecefZ field
///
///         auto iTowVal = iTOW.value(); // Get iTOW value
///         auto ecefXVal = ecefX.value(); // Get ecefX value
///         auto ecefYVal = ecefY.value(); // Get ecefY value
///         auto ecefZVal = ecefZ.value(); // Get ecefZ value
///
///             ... // Do something with the values
///     }
/// };
/// @endcode
///
/// @section ublox_output_messages Output Messages
/// Just like defining @ref ublox_input_messages, it is recommended to define
/// @b output ones.
/// @code
/// #include "ublox/message/NavPosecef.h"
/// #include "ublox/message/NavSol.h"
/// #include "ublox/message/NavTimegps.h"
/// ...
///
/// // Output messages
/// using OutNavPosecefPoll = ublox::message::NavPosecefPoll<MyOutputMessage>;
/// using OutNavSolPoll = ublox::message::NavSolPoll<MyOutputMessage>;
/// using OutNavTimegps = ublox::message::NavTimegps<MyOutputMessage>;
/// ...
/// @endcode
///
/// @section ublox_send_output_messages Sending Output Messages
/// To serialise output messages the same protocol stack defined in 
/// @ref ublox_protocol_stack section can be used.
/// @code
/// ProtStack protStack; // Protocol stack defined earlier
///
/// returns number of bytes written to the buffer
/// std::size_t writeMsg(const MyOutputMessage& msg, std::uint8_t* buf, std::size_t bufLen)
/// {
///     // Check the output buffer has enough space to serialise the message
///     if (bufLen < protStack.length(msg)) {
///         return 0U; // Nothing has been written
///     }
///
///     auto begIter = comms::writeIteratorFor<MyOutputMessage>(&outputBuf[0]);
///     auto iter = begIter;
///     auto es = protStack.write(msg, iter, bufLen);
///     if (es != comms::ErrorStatus::Success) {
///         ... // Handle the error
///         return 0U;
///     } 
///         
///     // Get the number of written bytes
///     return
///         static_cast<std::size_t>(
///             std::distance(begIter, iter));
/// }
/// @endcode
/// The example above uses provided buffer to serialise output message into. Let's
/// modify the example to use @b std::vector for output buffer and use its @b push_back()
/// member function to write the message. First there is a need to modify the
/// definition of @b MyOutputMessage interface class to use @b std::back_insert_iterator
/// instead of @b std::uint8_t* as it was before.
/// @code
/// using MyOutputMessage = 
///     ublox::MessageT<
///         comms::option::WriteIterator<std::back_insert_iterator<std::vector<std::uint8_t> > >, 
///         ...
///     >;
/// @endcode
/// The message serialisation code may look like below:
/// @code
/// typedef std::vector<std::uint8_t> OutputBuf;
///
/// OutputBuf writeMsg(const MyOutputMessage& msg)
/// {
///     OutputBuf buf;
///     
///     // Reserve enough space
///     buf.reserve(protStack.length(msg));
///
///     // Create iterator for writing
///     auto iter = std::back_inserter(buf); // will use "push_back()" to insert data
///
///     auto es = protStack.write(msg, iter, buf.max_size());
///     if (es == comms::ErrorStatus::UpdateRequired) {
///         // The checksum could not be written, needs to be fixed
///         auto updateIter = buf.begin();
///         es = protStack.update(updateIter, buf.size());
///     } 
///
///     if (es != comms::ErrorStatus::Success) {
///         ... // handle error
///     }
///         
///     // Return the written buffer
///     return buf;
/// }
/// @endcode
/// @b NOTE, that when using non random access iterator such as above, the
/// write operation cannot go back and calculate the checksum on the written data. 
/// As the result it will return @b comms::ErrorStatus::UpdateRequired status, which
/// indicates a necessity to call @b update() member function of the protocol stack.
///
/// @section ublox_bare_metal Bare Metal Considerations
/// Most of the defined message classes are suitable for bare-metal environment.
/// The problem may arise for messages that use variable length fields, such as
/// strings (for example @b INF-* messages) and/or lists (for example @b NAV-SVINFO).
/// By default, these type of fields will use @b std::string and @b std::vector
/// as their inner storage types. These classes use dynamic memory allocation 
/// and may use exceptions. If usage of these classes is not acceptable, both
/// the @b COMMS and @b UBLOX libraries provide the way to substitute these
/// classes with something more friendly. The @b COMMS library provides
/// @b comms::util::StaticString and @b comms::util::StaticVector types, which
/// expose the same public interface as @b std::string and @b std::vector
/// respectively but must receive the maximal size as an additional template
/// parameter and implement their functionality on top of @b std::array. To
/// force usage of these types with problematic messages pass 
/// @b comms::option::FixedSizeStorage<> option as additional template parameter,
/// with value specifying max amount
/// of allowed elements 
/// when defining the message:
/// @code
/// using InNavSvinfo = ublox::message::NavSvinfo<MyInputMessage, comms::option::FixedSizeStorage<128> >
/// @endcode 
/// The @b COMMS library also allows usage of third party storage types if
/// provided @b comms::util::StaticString and @b comms::util::StaticVector are
/// not good enough. To provide another type use @b comms::option::CustomStorageType
/// option instead.
/// @code
/// using ListElem = ublox::message::NavSvinfoFields::block;
/// using NavSvinfoDataStorage = boost::static_vector<ListElem, 128>;
/// using InNavSvinfo = ublox::message::NavSvinfo<MyInputMessage, comms::option::CustomStorageType<NavSvinfoDataStorage> >
/// @endcode 
/// Please refer to the documentation of the actual classes for detailed 
/// description of the extra options the class is allowed to receive.
///
/// @section ublox_fields More About Fields
/// Every message may contain zero or more fields. All the fields relevant
/// to a specific message are defined in a separate struct that has the
/// same name as a relevant message class with @b Fields suffix. For example
/// all the fields for ublox::message::NavPosecef message class
/// are defined in ublox::message::NavPosecefFields struct. All of these fields
/// definitions containing structs have @b All type, which is defined to be
/// @b std::tuple of all the fields the message contains. In fact when using
/// @b fields() member function of the message class, the reference of such
/// tuple is returned:
/// @code
/// NavPosecef msg;
/// NavPosecefFields::All& fields = msg.fields();
/// @endcode
///
/// In order to properly understand what the fields are, and how to operate with
/// them, it is recommended to thoroughly read the 
/// <b>Fields Tutorial</b> 
/// page in the @b COMMS library documentation.
///
/// @subsection ublox_fields_scaling Scaling Field Value
/// There are multiple fields that their serialised value is scaled. For example,
/// the ublox protocol specification defines the @b lat and @b lon fields of 
/// @b NAV-POSLLH message to be scaled with 1e-7 factor. It means that the
/// real floating point values of latitude and longitude are multiplied by 10,000,000
/// to get rid of the 7 decimal digits and casted to 4 bytes integral value type for
/// the serialisation. The ublox::message::NavPosllhFields::lat and
/// ublox::message::NavPosllhFields::lon fields defined to be of this 4 bytes
/// integral value type, which means when using the @b value() member function
/// of the relevant field object the serialised value of type @b std::int32_t is 
/// received. In order to scale it down to proper floating point value, use 
/// @b scaleAs() member function:
/// @code
/// void handle(InNavPosllh& msg)
/// {
///     auto& lat = msg.field_lat();
///     auto& lon = msg.field_lon();
/// 
///     std::int32_t latValue = lat.value();
///     std::int32_t lonValue = lon.value();
///
///     double latRealValue = lat.scaleAs<double>();
///     double lonRealValue = lon.scaleAs<double>(); 
///     ..
/// }
/// @endcode 
///
/// All the fields, that their serialised value can be scaled down, are defined
/// using @b comms::option::ScalingRatio
/// option from the @b COMMS library.
///
/// The ublox binary protocol also defines multiple distance related
/// fields. Some distance related fields are specified to be meters, others
/// centimetres or even millimetres. For convenience, all such fields are defined 
/// with an ability to be scaled down to @b meters. For example, @b ecefX,
/// @b ecefY, and @b ecefZ fields in @b NAV-POSECEF message are defined to be
/// in centimetres in the protocol specification. However, their definition uses
/// ublox::field::common::Scaling_cm2m option, which allows scaling the value
/// down to meters if necessary:
/// @code
/// void handle(InNavPosecef& msg)
/// {
///     auto& ecefX = msg.field_ecefX(fields);
///
///     std::int32_t ecefXinCentimeters = ecefX.value(); // ecefX value in centimetres 
///     double ecefXinMeters = ecefX.scaleAs<double>(); // ecefX value in meters
/// }
/// @endcode 
/// In a similar way all the time related fields are defined with an ability to
/// be scaled to seconds (instead of milliseconds, microseconds, and nanoseconds).
/// For example, the same @b NAV-POSECEF message has @b iTOW field 
/// (ublox::message::NavPosecefFields::iTOW), which is GPS time of the week in
/// milliseconds. If there is a need to get this value in seconds, use the
/// same @b scaleAs() member function:
/// @code
/// void handle(InNavPosecef& msg)
/// {
///     auto& iTOW = msg.field_iTOW();
///
///     std::uint32_t iTOWinMilliseconds = iTOW.value(); // iTOW value in milliseconds 
///     double iTOWinSeconds = ecefX.scaleAs<double>(); // iTOW value in seconds
/// }
/// @endcode 
/// Also the velocity related fields that are defined to be <b> centimetres per
/// second</b> or <b>millimetres per second</b> can be scaled down to 
/// <b> meters per second </b> if needed.
///
/// @subsection ublox_fields_message_id Message ID Field
/// The ublox binary protocol identifies the messages using two fields: <b>class
/// ID</b> and <b>message ID</b> in the class. This library combines these two values into
/// a single one and defines it as ublox::MsgId enumeration with @b std::uint16_t
/// as underlying type, where the <b>class ID</b> is most significant byte and
/// <b>message ID</b> is least significant one. Where ublox binary protocol
/// uses these two values (@b ACK-ACK, @b ACK-NAK messages, or wrapping transport data)
/// this library uses single ublox::field::MsgId field (See ublox::message::AckAck
/// and ublox::message::AckNak message classes). 
///
/// @b Note, that ublox binary protocol uses <b>little endian</b> to serialise all the
/// data. However, the <b>class ID</b> from the message identification information
/// must be serialised prior to <b>message ID</b>. In order to properly handle
/// this case, the ublox::field::MsgId field is defined to have <b>big endian</b>
/// serialisation, while all other fields use <b>little endian</b>
///
/// @subsection ublox_fields_bitmasks Bitmasks
/// There are multiple bitmask fields that inherit from 
/// @b comms::field::BitmaskValue (for example ublox::message::CfgPrtFields::outProtoMask).
/// This bitmask fields use @b COMMS_BITMASK_BITS() macro from @b COMMS library
/// to define names for the bits. This macro will create @b BitIdx enum with
/// all the values prefixed with @b BitIdx_, which cat be used to get/set
/// bit values. 
/// @code
/// using OutCfgPrtUsb = ublox::message::CfgPrtUsb<MyOutputMessage>;
///
/// OutCfgPrtUsb msg;
/// auto& outProtoMaskField = msg.field_outProtoMask();
///
/// using OutProtoMaskField = ublox::message::CfgPrtFields::outProtoMask;
/// outProtoMaskField.setBitValue(OutProtoMaskField::BitIdx_outUbx, true);
/// outProtoMaskField.setBitValue(OutProtoMaskField::BitIdx_outNmea, false);
/// @endcode 
///
/// @subsection ublox_fields_complex Complex Fields
/// There are multiple complex fields, such as bitfields (for example 
/// ublox::message::CfgPrtFields::txReady) or bundles (for example
/// ublox::message::NavSvinfoFields::block). These complex fields inherit
/// from @b comms::field::Bitfield or @b comms::field::Bundle respectively and
/// use @b COMMS_FIELD_MEMBERS_ACCESS() macro from @b COMMS library to define
/// names to their member fields. The easiest way to access member fields is
/// to use @b field_* prefixed access functions generated by the used macro.
/// For example:
/// @code
/// using OutCfgPrtUsb = ublox::message::CfgPrtUsb<MyOutputMessage>;
///
/// OutCfgPrtUsb msg;
/// auto& txReadyField = msg.field_txReady();
/// auto& enField = txReadyField.field_en();
/// auto& polField = txReadyField.field_pol();
/// auto& pinField = txReadyField.field_pin();
/// auto& thresField = txReadyField.field_thres();
///
/// enField.value() = ...;
/// polField.value() = ...;
/// pinField.value() = ...;
/// thresField.value() = ...;
/// @endcode

